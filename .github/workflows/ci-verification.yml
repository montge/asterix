name: DO-278 Verification CI

on:
  push:
    branches: [ master, develop, 'feature/**', 'do-278/**' ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read

env:
  COVERAGE_TARGET_OVERALL: 90
  COVERAGE_TARGET_MODULE: 80

jobs:
  # Build and test C++ executable
  build-cpp:
    name: Build C++ (Ubuntu)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev lcov valgrind

    - name: Build with Make
      run: |
        cd src
        make clean
        make
        make install
        make debug
        make debug install

    - name: Run C++ tests
      run: |
        cd install/test
        ./test.sh

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: asterix-executable-ubuntu
        path: |
          install/asterix
          install/config/

  # Build with CMake
  build-cmake:
    name: Build with CMake
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev cmake

    - name: Build with CMake
      run: |
        cmake .
        make

    - name: Test executable
      run: |
        ./install/asterix --version || true
        ./install/asterix --help || true

  # Python module build and test
  test-python:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev
        python -m pip install --upgrade pip
        pip install setuptools wheel coverage pytest pytest-cov

    - name: Build Python module
      run: |
        python setup.py build

    - name: Install Python module
      run: |
        python setup.py install

    - name: Run Python unit tests
      run: |
        python -m pytest asterix/test/ -v --cov=asterix --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Run Python unittest
      run: |
        python -m unittest discover -s asterix/test -p 'test_*.py' -v
      continue-on-error: true

    - name: Upload Python coverage
      uses: codecov/codecov-action@v5.5.1
      with:
        files: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}
      continue-on-error: true

  # Coverage analysis for C++
  coverage-cpp:
    name: C++ Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev lcov gcovr

    - name: Build with coverage flags
      run: |
        cd src
        # TODO: Add coverage flags to Makefile
        # For now, this is a placeholder
        make clean
        make
        make install
        make debug
        make debug install

    - name: Verify debug executable exists
      run: |
        echo "=== Checking for debug executable ==="
        ls -la obj/main/debug/ || echo "DEBUG DIRECTORY NOT FOUND"
        if [ -f obj/main/debug/asterix ]; then
          echo "✓ Debug executable exists"
          file obj/main/debug/asterix
          obj/main/debug/asterix --version || echo "Failed to run --version"
        else
          echo "✗ DEBUG EXECUTABLE MISSING!"
          echo "Directory contents:"
          find obj/main -type f -name "asterix" || echo "No asterix executables found"
        fi

    - name: Run tests
      id: run_tests
      run: |
        cd install/test
        ./test.sh
      continue-on-error: true

    - name: Show valgrind results if tests failed
      if: always()
      run: |
        cd install/test
        if [ -f valgrind.result ]; then
          echo "=== Valgrind output ==="
          cat valgrind.result
        else
          echo "No valgrind.result file found"
        fi

    - name: Check test results
      if: steps.run_tests.outcome == 'failure'
      run: |
        echo "Tests failed - check logs above"
        exit 1

    - name: Generate coverage report (placeholder)
      run: |
        echo "Coverage instrumentation to be added"
        # lcov --capture --directory src --output-file coverage.info
        # lcov --remove coverage.info '/usr/*' --output-file coverage.info
        # lcov --list coverage.info
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5.5.1
      with:
        files: ./coverage.info
        flags: cpp
        name: cpp-coverage
      continue-on-error: true

  # Memory leak detection
  memory-check:
    name: Valgrind Memory Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev valgrind

    - name: Build debug version
      run: |
        cd src
        make clean
        make debug
        make debug install

    - name: Run valgrind tests
      run: |
        cd install/test
        # Run existing valgrind tests from test.sh
        valgrind --leak-check=full --error-exitcode=1 \
          ../../obj/main/debug/asterix -P -d ../config/asterix.ini \
          -f ../sample_data/cat_062_065.pcap -jh > /dev/null 2>&1

        valgrind --leak-check=full --error-exitcode=1 \
          ../../obj/main/debug/asterix -G -d ../config/asterix.ini \
          -f ../sample_data/parsegps.gps -jh > /dev/null 2>&1
      continue-on-error: true  # Known memory leaks in legacy C++ code

  # Static analysis
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          src/asterix/ src/engine/ src/main/ 2> cppcheck-report.xml
      continue-on-error: true

    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml
      continue-on-error: true

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-cpp, test-python]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libexpat1-dev
        python -m pip install --upgrade pip
        pip install setuptools wheel

    - name: Build C++ executable
      run: |
        cd src
        make clean
        make
        make install
        make debug
        make debug install

    - name: Build Python module
      run: |
        python setup.py build
        python setup.py install

    - name: Run integration tests
      run: |
        cd install/test
        ./test.sh

    - name: Test Python examples
      run: |
        python asterix/examples/read_raw_bytes.py
        python asterix/examples/multicast_receive.py --help || true
      continue-on-error: true

  # Build status summary
  verify-summary:
    name: Verification Summary
    runs-on: ubuntu-latest
    needs: [build-cpp, build-cmake, test-python, coverage-cpp, memory-check, static-analysis, integration-tests]
    if: always()

    steps:
    - name: Check verification results
      run: |
        echo "=== DO-278 Verification Summary ==="
        echo "Build C++: ${{ needs.build-cpp.result }}"
        echo "Build CMake: ${{ needs.build-cmake.result }}"
        echo "Test Python: ${{ needs.test-python.result }}"
        echo "Coverage C++: ${{ needs.coverage-cpp.result }}"
        echo "Memory Check: ${{ needs.memory-check.result }}"
        echo "Static Analysis: ${{ needs.static-analysis.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"

    - name: Verification status
      run: |
        if [[ "${{ needs.build-cpp.result }}" != "success" ]] || \
           [[ "${{ needs.test-python.result }}" != "success" ]] || \
           [[ "${{ needs.memory-check.result }}" != "success" ]] || \
           [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "::warning::Some verification jobs failed or were skipped"
          exit 0
        else
          echo "✓ All required verification jobs passed"
        fi
